"""

24. Python - интерпретируемый язык или компилируемый?
- интерпретируемый

25. Какие есть меняющиеся и постоянные типы данных?
-меняющиеся: list, set, dict
- ...

26. Что такое область видимости переменных?


27. Что такое introspection?

28. Разница между is и ==?

29. Разница между __init __ () и __new __ ()?

30. В чем разница между потоками и процессами?

31. Какие есть виды импорта?
from main import def1
import main
import main as main2  # alias
from main import *  # !collisions



32. Что такое класс, итератор, генератор?

33. Что такое метакласс, переменная цикла?

34. В чем разница между итераторами и генераторами?

35. В чем разница между staticmethod и classmethod?

36. Как работают декораторы, контекстные менеджеры?

37. Как работают dict comprehension, list comprehension и set comprehension?

38. Можно ли использовать несколько декораторов для одной функции?

39. Можно ли создать декоратор из класса?

40. Какие есть основные популярные пакеты (requests, pytest, etc)?

41. Что такое lambda-функции?

42. Что означает *args, **kwargs и как они используются?

43. Что такое exceptions, <try-except>?

44. Что такое PEP (Python Enhancement Proposal), какие из них знаете (PEP 8, PEP 484)?

45. Напишите hello-world сервис, используя один из фреймворков.

46. Какие есть типы данных и какая разница между list и tuple, зачем они?

47. Как использовать встроенные коллекции (list, set, dictionary)?

48. В чем заключается сложность доступа к элементам dict?

49. Как создается объект в Python, для чего __new__, зачем __init__?

50. Что знаете из модуля collections, какими еще built-in модулями пользовались?

51. Что такое шаблонизатор и как в нем выполнять базовые операции (объединять участки шаблона, выводить дату, выводить данные с серверной стороны)?

52. Как Python работает с HTTP-сервером?

53. Что происходит, когда создается виртуальная среда?

"""


# s1 = "141241"
# s1[2] = ""

# l1 = ""

def ex1():
    # global l1
    l1 = "12313"
    print(l1)


# print(l1)

i1 = 12
print(type(i1))


class Mother:
    def __init__(self, val):
        self.val = val

    def __eq__(self, other):
        return True

    pass


f1 = Mother(12)  # 1573977310800
f2 = f1  # 1573977310800
f3 = Mother(12)  # 1573977310736

print(id(f1))
print(id(f2))
print(id(f3))
print(f1 is f2)
print(f1 == f2)
print(f1 is f3)
print(f1 == f3)
