Зачем?
1. Более функционально чем jinja.
2. Легче писать сложную логику(SPA).
3. Больше денег, 30% вакансий требуют небольшое знание react/vue.
4. Понимание взаимодействий.


Нужна база вопросов с ответами(4 шт.) (т.е. их много, например 500), нужно при старте игры.
- случайный(20 случайных вопросов из списка перемешаннных).


Как работает frontend?(как у меня на экране браузере появляется страница)
- frontend это html(каркас)+css(стили)+js(логика).
- 1. Вы обращаетесь по какому-то адресу https://hh.ru/. 
- 2. Fastapi(backend) возвращает html.
- 3. В html есть ссылки (<link rel="stylesheet" href="https://i.hh.ru/webpackBuild/7361.07536f6e2295b01df964.css">)
- 4. Nginx отдаёт браузеру по запросу css+js.

MPA - multi page application
Jinja - шаблонизатор. Angular / React / Vue
1. Jinja - ограничена маленьким набором стандартных функций:
- {% for i in data %}
- {% if is_data %}
- {% url 'api' %}
2. Очень не динамичная(т.е. для большинства изменений нужно перезагружать странцу)
3. Подходит для стандартных и типичных задач. 


SPA - single page application (одностраничное приложение)
1. Нужно знать JS, развернуть этот стек технологий и как им пользоваться.

1. Развернуть React и сделать веб-запрос и показать результат на экране.
https://nodejs.org/en
npx create-react-app frontend --template redux-typescript

'200000' + 50000 = 
Python - error
Javascript - '20000050000'

'200000' - 50000 = 
Python - error
Javascript - 150000

2. Очистить шаблон от мусора.
3. Сначала вывести результат в консоль. 
4. Сделать веб-запрос к гарантированному api.
5. Поднять backend и сделать запрос к нему из frontend.

6. Показать на экране.









