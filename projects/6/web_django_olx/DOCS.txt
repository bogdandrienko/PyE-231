0. Бизнес-боль(проблема):
* Olx 3.0
- площадка продажи и покупки товаров
- публикация товаров только авторизованным(todo + реклама)
- регистрация и авторизация(аутентификация)
- просмотр товаров всем (пагинация, фильтры, поиск)
- список товаров и детальный вид
- wish list (список желаний)
- ...

Стек технологий:
- Python(django - наш курс/flask - самый лёгкий/fastapi - самый быстрый/sanic - неполноценный)
- html, css, js

1. План и тех.задание(Декомпозиция - разделение крупной задачи на мелкие):
- Лендинг | HomePage
- Регистрация | RegisterPage
- Публикация товара | PublicPage
- Список товаров | ListPage
- Детально о товаре | DetailPage


2. Trello/Jira:
- разложили задачи, выбрали ответственных(dev(backend/frontend/fullstack), tester(QA), analitic...)

Github/Gitlab:
- создать репозиторий(настроить ветки)
- настроить участникам ssh-ключи
- настроить linter(flake8) / статический анализатор(mypy) / black

Ответственность и задачи:
middle fullstack - "всё на нас" (дизайн, логика, база данных, и публикация) (oblako.kz)


3. Разработка

MVP - minimal variable product - минимально жизнеспособный продукт

URL -> VIEW -> MODEL(optional) -> TEMPLATE(optional)
MODEL(optional) -> VIEW -> TEMPLATE(optional) -> URL ->

* 
* Вернуть HTML страницу +
* Сверстать домашнюю страницу(tailwind) +
* Создать страницу регистрации(bootstrap) +
* Система регистрации(вход/выход, регистрацию, показ логина) +
* Публикация товара
*

4. Публикация и поддержка



1. Header - одинаковый на всех страницах. На котором ссылки на профиль, главную, язык и т.д.
2. Поиск -

1. Домашняя страница (навбар, поиск, категории, вип, футер)
2. Страница поиска
3. Страница категорий
4. Страница VIP

* Связи: O2O, O2M, M2M.
* Django сигналы
* Расширенная модель пользователя
* Практика: получение данные на своей странице с HH: 1) api 2) парсинг

* Категории (для фильтрации)


* Лайки(система рейтинга)
* расширить модель товара - картинка и др поля
* Контекстный менеджер
* Simple Tag bor filters
* Чат с техподдержкой/продавцом

