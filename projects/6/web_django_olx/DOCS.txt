0. Бизнес-боль(проблема):
* Olx 3.0
- площадка продажи и покупки товаров
- публикация товаров только авторизованным(todo + реклама)
- регистрация и авторизация(аутентификация)
- просмотр товаров всем (пагинация, фильтры, поиск)
- список товаров и детальный вид
- wish list (список желаний)
- ...

Стек технологий:
- Python(django - наш курс/flask - самый лёгкий/fastapi - самый быстрый/sanic - неполноценный)
- html, css, js

1. План и тех.задание(Декомпозиция - разделение крупной задачи на мелкие):
- Лендинг | HomePage
- Регистрация | RegisterPage
- Публикация товара | PublicPage
- Список товаров | ListPage
- Детально о товаре | DetailPage


2. Trello/Jira:
- разложили задачи, выбрали ответственных(dev(backend/frontend/fullstack), tester(QA), analitic...)

Github/Gitlab:
- создать репозиторий(настроить ветки)
- настроить участникам ssh-ключи
- настроить linter(flake8) / статический анализатор(mypy) / black

Ответственность и задачи:
middle fullstack - "всё на нас" (дизайн, логика, база данных, и публикация) (oblako.kz)


3. Разработка

MVP - minimal variable product - минимально жизнеспособный продукт

URL -> VIEW -> MODEL(optional) -> TEMPLATE(optional)
MODEL(optional) -> VIEW -> TEMPLATE(optional) -> URL ->

* 
* Вернуть HTML страницу +
* Сверстать домашнюю страницу(tailwind) +
* Создать страницу регистрации(bootstrap) +
* Система регистрации(вход/выход, регистрацию, показ логина) +
* Публикация товара
*

4. Публикация и поддержка



1. Header - одинаковый на всех страницах. На котором ссылки на профиль, главную, язык и т.д.
2. Поиск -

1. Домашняя страница (навбар, поиск, категории, вип, футер)
2. Страница поиска
3. Страница категорий
4. Страница VIP

* Связи: O2O, O2M, M2M.
* Django сигналы
* Расширенная модель пользователя
* Практика: получение данные на своей странице с HH: 1) api 2) парсинг

* Категории (для фильтрации)

* Улучшение дизайна
* Лайки(система рейтинга)
1. Нужен рейтинг для товара(отрицательный/положительный)
2. Рейтинг индивидуальный (если я поставил лайк, это не значит что-то другой поставил лайк)

# ничего нет -> like -> ItemRating.objects.create(is_like=True)
# ничего нет -> dislike -> ItemRating.objects.create(is_like=False)
# is_like=True -> like -> ItemRating.objects.delete()
# is_like=False -> dislike -> ItemRating.objects.delete()
# is_like=True -> dislike -> is_like=False
# is_like=False -> like -> is_like=True


# navbar + footer - include(jinja)
# base - extend(jinja)
# custom filters and tags - templatetags(django_app_filters_and_tags.py)
# search
# item - Models.py
# category item - ForeignKey(OneToMany)
# tags item - ManyToMany
# vip item - OneToOne
# comment item - for item
# rating item - like/dislike/nothing
# list item -
# detail item -

* Контекстный менеджер и middleware
* Практика -> опубликовать приложение для отправки товаров, с поиском и генерацией qr-кодов.
Крайне элитный алкоголь. На бутылках печатать qr-код, после скана пользователя отправляет на
страницу этого товара с описанием.
1. Нужна страница для создания изделия. + автогенерация QR
2. После скана, нужно чтобы перенаправляло на страницу товара.
* расширить модель товара - картинка и др поля
* static/media: view, upload, download
* create item -> moderate
* hide(delete) item (URL->VIEW->TEMPLATE)

* Чат с техподдержкой/продавцом (websocket)
* Практика -> Профиль пользователя, аватарка
* Практика -> leetcode - 2 задачи лёгкого уровня на выбор

* change item
* Изменяемая сортировка
* избранное
* база postgre
* публикация
* кэш
* пагинация
* таблица рейтингов
* слежка за категорией (отправлять письмо, если появился товар в заданной категории)
* Оплата(3D secure)


ПРОТОКОЛ http(s) [1вопрос-1ответ] - request-response(запрос-ответ), короткий цикл жизни запроса
мы сделали запрос, сервер от 0 до 60 секунд обработка, затем ответ или ошибки времени ожидания
плюсы: простота
минус: легаси, тяжеловесный(много трафика)

ПРОТОКОЛ websocket(socket) [диалог, т.е. бесконечные вопрос-ответ] - request-handshake-wait(запрос-ожидание),
длинный цикл жизни запроса, мы создание соединение(connection, listen, binding) и оно может держаться час-два.
плюсы: время жизни, отсутвие накладных расходов трафика
минус: сложность, асинхронность

ПРОТОКОЛ gRPC [1вопрос-1ответ] - request-response(запрос-ответ), короткий цикл жизни запроса
мы сделали запрос, сервер от 0 до 60 секунд обработка, затем ответ или ошибки времени ожидания
*Google - как аналог современного лёгкого http
плюсы: легковесный
минус: сложность
